"""
API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
"""

from typing import Annotated, List, Dict, Any

from fastapi import APIRouter, Depends, status, HTTPException

from sqlalchemy import select, insert, update, and_, delete
from sqlalchemy.ext.asyncio import AsyncSession

from slugify import slugify

from app.schemas import CreateProduct

from app.models.category import Category
from app.models.products import Product  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é SQLAlchemy –º–æ–¥–µ–ª—å
from app.backend.db_depends import get_session  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å


session = Annotated[
    AsyncSession, Depends(get_session)
]  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏


router = APIRouter(prefix="/products", tags=["products ü•≠üçéüçê"])


@router.get("/", summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã")  # Done
async def all_products(session: session):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º.
    Returns:
        List[Product]: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Product.
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    """
    products = select(Product).where(and_(Product.is_active == True, Product.stock > 0))
    query = await session.execute(products)
    products_all = query.scalars().all()
    if not products_all:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="There are no product"
        )
    return products_all


@router.post("/create", summary="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç")  # Done
async def create_product(
    session: session, product: CreateProduct
) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    Args:
        product (CreateProduct): –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
    Returns:
        Dict[str, Any]: –°—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
    Raises:
        HTTPException: –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    category_query = select(Category).where(Category.id == product.category)
    category_result = await session.execute(category_query)
    category = category_result.scalars().first()

    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {product.category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        )
    product_create = insert(Product).values(
        {
            "name": product.name,
            "slug": slugify(product.name),
            "description": product.description,
            "price": product.price,
            "image_url": product.image_url,
            "stock": product.stock,
            "rating": 0.0,
            "category_id": product.category,
        },
    )
    await session.execute(product_create)
    await session.commit()
    return {"status_code": status.HTTP_201_CREATED, "transaction": "Successful"}


@router.get("/{category_slug}", summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def product_by_category(
    session: session, category_slug: str
) -> List[Dict[int, str]]:
    """API –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    id_list = []
    prod_list = []
    check_category = select(Category).filter_by(slug=category_slug)
    check_query = await session.execute(check_category)
    check_result = check_query.scalars().one_or_none()
    if check_result is not None:
        id_list.append(int(check_result.id))
        print(id_list)

        check_subcategory = select(Category).where(Category.parent_id == id_list[0])
        check_subquery = await session.execute(check_subcategory)
        check_subresult = check_subquery.scalars().all()
        print(check_subresult)

        if check_subresult is not None:
            for el in check_subresult:
                id_list.append(int(el.id))
        print(id_list)
        all_products_by_id = select(Product).where(
            and_(
                Product.category_id.in_(id_list),
                Product.is_active == True,
                Product.stock > 0,
            )
        )
        res_query = await session.execute(all_products_by_id)
        res_scal = res_query.scalars().all()
        for el in res_scal:
            prod_list.append({el.id: el.name})
            print(prod_list)
        return prod_list

    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="Category not found"
        )


@router.get("/detail/{product_slug}", summary="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
async def product_detail(
    session: session, product_slug: str
) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ –µ–≥–æ slug.
    Args:
        product_slug (str): Slug –ø—Ä–æ–¥—É–∫—Ç–∞.
    Returns:
        Dict[str, str]: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    detail = select(Product).filter_by(slug=product_slug)
    query = await session.execute(detail)
    result = query.scalars().one_or_none()
    if result:
        return {"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": result.description}
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="There are no product"
        )


@router.put("/detail/{product_slug}", summary="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ")
async def update_product(
    session: session, product_slug: str, product: CreateProduct
) -> Dict[str, str]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    Args:
        product_slug (str): Slug –ø—Ä–æ–¥—É–∫—Ç–∞.
        product (CreateProduct): –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞.
    Returns:
        Dict[str, str]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    check_query = select(Product).filter_by(slug=product_slug)
    query = await session.execute(check_query)
    result = query.scalars().one_or_none()
    if result:
        new_product = (
            update(Product)
            .values(
                {
                    "name": product.name,
                    "description": product.description,
                    "price": product.price,
                    "image_url": product.image_url,
                    "stock": product.stock,
                    "rating": 0.0,
                    "category_id": product.category,
                },
            )
            .filter_by(slug=product_slug)
        )
        await session.execute(new_product)
        await session.commit()
        return {"–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": result.description}
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="There is no product found"
        )


@router.delete("/delete", summary="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def delete_product(
    session: session, product_slug: str
) -> Dict[str, Any]:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –µ–≥–æ slug.
    Args:
        product_slug (str): Slug –ø—Ä–æ–¥—É–∫—Ç–∞.
    Returns:
        Dict[str, Any]: –°—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    check_product = select(Product).filter_by(slug=product_slug)
    check_query = await session.execute(check_product)
    result = check_query.scalars().one_or_none()
    print(result)
    if result is not None:
        product_delete = delete(Product).filter_by(slug=product_slug)
        query = await session.execute(product_delete)
        return {
            "status_code": status.HTTP_200_OK,
            "transaction": "Product delete is successful",
        }
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail="There is no product found"
        )

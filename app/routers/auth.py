"""
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from typing import Annotated

from fastapi import APIRouter, Depends, status, HTTPException, Response
from fastapi.security import HTTPBasic, HTTPBasicCredentials

from sqlalchemy import select, insert
from sqlalchemy.ext.asyncio import AsyncSession

from passlib.context import CryptContext


from app.models.user import User
from app.schemas import CreateUser, UserResponse


from app.backend.db_depends import get_session  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

session = Annotated[
    AsyncSession, Depends(get_session)
]  # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏


router = APIRouter(prefix="/auth", tags=["auth ü§∑ü§∑‚Äç‚ôÇÔ∏èüë∂"])
bcrypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
security = HTTPBasic()  # –í—Å–ø–ª—ã–≤–∞—é—â–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞


@router.post("/", summary="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def create_user(session: session, new_user: CreateUser) -> dict | str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        new_user (CreateUser): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict | str: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    """
    query = insert(User).values(
        [
            {
                "first_name": new_user.first_name,
                "last_name": new_user.last_name,
                "username": new_user.username,
                "email": new_user.email,
                "hashed_password": bcrypt_context.hash(new_user.password),
            },
        ],
    )
    try:
        await session.execute(query)
        await session.commit()
        return {"status_code": status.HTTP_201_CREATED, "transaction": "Successful"}
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}."


async def get_current_username(
    session: session, credentials: HTTPBasicCredentials = Depends(security)
):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        credentials (HTTPBasicCredentials): –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTTP Basic Authentication.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        User: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        HTTPException: –í–æ–∑–Ω–∏–∫–∞–µ—Ç, –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.
    """
    user = await session.scalar(
        select(User).where(User.username == credentials.username)
    )
    if not user or not bcrypt_context.verify(
        credentials.password, user.hashed_password
    ):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        )
    return user


@router.get("/users/me")
async def read_current_user(user: str = Depends(get_current_username)) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        user (User): –û–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –°–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return {"User": UserResponse.model_validate(user)}
